<?php

/**
 * ## possible assertions of Eloquent Models
 * add this file into your Phpunit test files
 *
 * ------
 *
 * This file is auto-generated by:
 * SchenkeIo\LaravelRelationManager\Writer\GenerateAssertModelRelationsTrait
 * using the data from: @see SchenkeIo\LaravelRelationManager\Enums\Relation
 */

namespace SchenkeIo\LaravelRelationManager\Phpunit;

use SchenkeIo\LaravelRelationManager\Data\ModelCountData;
use SchenkeIo\LaravelRelationManager\Data\ModelRelationData;
use SchenkeIo\LaravelRelationManager\Enums\Relation;

trait AssertModelRelations
{
    public function assertFirstClassIsOlderThanSecondClass(string $class1, string $class2): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($class1, $class2, Relation::noRelation),
            new ClassAgeConstraint
        );
    }

    public function assertModelRelationCount(string $model, int $count): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelCountData($model, $count),
            new RelationshipCountConstraint
        );
    }

    public function assertModelHasOne(string $modelFrom, string $modelTo): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelTo, Relation::hasOne),
            new RelationshipExistsConstraint
        );
    }

    public function assertModelHasMany(string $modelFrom, string $modelTo): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelTo, Relation::hasMany),
            new RelationshipExistsConstraint
        );
    }

    public function assertModelHasOneThrough(string $modelFrom, string $modelTo): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelTo, Relation::hasOneThrough),
            new RelationshipExistsConstraint
        );
    }

    public function assertModelHasManyThrough(string $modelFrom, string $modelTo): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelTo, Relation::hasManyThrough),
            new RelationshipExistsConstraint
        );
    }

    public function assertModelBelongsToMany(string $modelFrom, string $modelTo): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelTo, Relation::belongsToMany),
            new RelationshipExistsConstraint
        );
    }

    public function assertModelBelongsTo(string $modelFrom, string $modelTo): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelTo, Relation::belongsTo),
            new RelationshipExistsConstraint
        );
    }

    public function assertModelIsSingle(string $model): void
    {
        \PHPUnit\Framework\assertThat($model, new NoRelationshipConstraint);
    }

    public function assertModelMorphTo(string $modelFrom): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelFrom, Relation::morphTo),
            new RelationshipExistsConstraint
        );
    }

    public function assertModelMorphOne(string $modelFrom, string $modelTo): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelTo, Relation::morphOne),
            new RelationshipExistsConstraint
        );
    }

    public function assertModelMorphMany(string $modelFrom, string $modelTo): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelTo, Relation::morphMany),
            new RelationshipExistsConstraint
        );
    }

    public function assertModelIsManyToMany(string $modelFrom, string $modelTo): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelTo, Relation::isManyToMany),
            new RelationshipExistsConstraint
        );
    }

    public function assertModelHasOneIndirect(string $modelFrom, string $modelTo): void
    {
        \PHPUnit\Framework\assertThat(
            new ModelRelationData($modelFrom, $modelTo, Relation::hasOneIndirect),
            new RelationshipExistsConstraint
        );
    }
}
