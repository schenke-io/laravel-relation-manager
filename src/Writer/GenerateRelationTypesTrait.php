<?php

namespace SchenkeIo\LaravelRelationManager\Writer;

use Nette;
use SchenkeIo\LaravelRelationManager\Define\DefineRelation;
use SchenkeIo\LaravelRelationManager\Enums\Relation;

class GenerateRelationTypesTrait
{
    public static function getContent(): string
    {
        $location = 'SchenkeIo\LaravelRelationManager\Define';
        $file = new Nette\PhpGenerator\PhpFile;
        $file->addComment('## Description of all the possible relationships');
        $file->addComment("\n------\n");
        $file->addComment('This file is auto-generated by: ');
        $file->addComment(__CLASS__);
        $file->addComment('using the data from: '.Relation::class);

        $nameSpace = $file->addNamespace($location);
        $nameSpace->addUse(Relation::class);
        $nameSpace->addUse(DefineRelation::class);

        $trait = $nameSpace->addTrait('RelationTypes');
        foreach (Relation::cases() as $case) {
            if ($case->hasPublicFunction()) {
                $method = $trait->addMethod($case->name);
                $method->setReturnType(DefineRelation::class);
                if ($case->askForRelatedModel()) {
                    $method->addParameter('modelName')->setType('string');
                }
                if ($case->askForInverse()) {
                    $method->addParameter('addReverseRelation')->setType('bool');
                }
                $hasInverse = $case->hasInverse() ? 'true' : 'false';
                $method->addBody('return $this->buildRelation(');
                $method->addBody('    '.($case->askForRelatedModel() ? '$modelName' : '""').',');
                $method->addBody('    '.($case->askForInverse() ? '$addReverseRelation' : 'false').',');
                $method->addBody('    '.'Relation::'.$case->name.',');
                $method->addBody('    '.'Relation::'.$case->inverse()->name);
                $method->addBody(');');
            }
        }

        $printer = new Nette\PhpGenerator\PsrPrinter;

        return $printer->printFile($file);
    }
}
