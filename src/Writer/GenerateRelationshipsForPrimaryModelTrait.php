<?php

namespace SchenkeIo\LaravelRelationshipManager\Writer;

use Nette;
use SchenkeIo\LaravelRelationshipManager\Data\ModelRelationData;
use SchenkeIo\LaravelRelationshipManager\Define\RelationshipEnum;

class GenerateRelationshipsForPrimaryModelTrait
{
    public static function getContent(): string
    {
        $location = 'SchenkeIo\LaravelRelationshipManager\Define';
        $file = new Nette\PhpGenerator\PhpFile;
        $file->addComment('## Description of all the possible relationships');
        $file->addComment("\n------\n");
        $file->addComment('This file is auto-generated by: ');
        $file->addComment(__CLASS__);
        $file->addComment('using the data from: '.RelationshipEnum::class);

        $nameSpace = $file->addNamespace($location);
        $nameSpace->addUse($location.'\RelationshipEnum');
        $nameSpace->addUse(ModelRelationData::class);

        $trait = $nameSpace->addTrait('RelationshipsForPrimaryModel');
        foreach (RelationshipEnum::cases() as $case) {
            if ($case->hasPublicFunction()) {
                $method = $trait->addMethod($case->name);
                $method->setReturnType(ModelRelationData::class);
                if ($case->askForModel()) {
                    $method->addParameter('model')->setType('string');
                }
                if ($case->askForInverse()) {
                    $method->addParameter('preventInverse', false)->setType('bool');
                }
                $hasInverse = $case->hasInverse() ? 'true' : 'false';
                $preventInverse = $case->askForInverse() ? '$preventInverse' : $hasInverse;
                $method->addBody(
                    'return new ModelRelationData($this->model, '.
                    ($case->askForModel() ? '$model' : 'null').
                    ', RelationshipEnum::'.
                    $case->name.
                    ', '.
                    $preventInverse.');'
                );
            }
        }

        $printer = new Nette\PhpGenerator\PsrPrinter;

        return $printer->printFile($file);
    }
}
