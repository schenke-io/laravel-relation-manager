<?php

namespace SchenkeIo\LaravelRelationManager\Writer;

use Nette;
use SchenkeIo\LaravelRelationManager\Data\ClassData;
use SchenkeIo\LaravelRelationManager\Data\ProjectData;
use SchenkeIo\LaravelRelationManager\Define\RelationshipEnum;

class GenerateProjectTestFile
{
    public static function getContent(
        ProjectData $projectData,
        string $shortClassName,
        string $nameSpace,
        string $parentTestClass = 'Tests\TestCase'
    ): string {
        if (str_contains($projectData->signature, ':')) {
            // artisan
            $rebuildCommand = 'php artisan '.$projectData->signature;
        } else {
            $rebuildCommand = $projectData->signature;
        }

        //        $nameSpace = $reflectionTestFile->getNamespaceName();
        $file = new Nette\PhpGenerator\PhpFile;
        $file->addComment('## Test of all models defined');
        $file->addComment("\n------\n");
        $file->addComment('This file is auto-generated by: '.$projectData->commandClassName);
        $file->addComment('rewrite this test-file on the console with: '.$rebuildCommand);
        // https://laravel.com/docs/10.x/database-testing#resetting-the-database-after-each-test
        $migrationClass = 'Illuminate\Foundation\Testing\RefreshDatabase';
        $assertClass = 'SchenkeIo\LaravelRelationManager\Phpunit\AssertModelRelationships';
        $nameSpace = $file->addNamespace($nameSpace);
        $nameSpace->addUse($migrationClass);
        $nameSpace->addUse($assertClass);
        $nameSpace->addUse($projectData->commandClassName);
        $nameSpace->addUse($parentTestClass);

        $class = $nameSpace->addClass($shortClassName);
        $class->setExtends($parentTestClass);
        $class->addTrait($migrationClass);
        $class->addTrait($assertClass);
        /*
         * file age test
         */
        $method = $class->addMethod('testCommandFileIsOlderThanThisTestFile');
        $method->addComment('@return void');
        $method->addComment('');
        $method->addComment('Since this class is written by the Command file '.$projectData->commandClassName);
        $method->addComment('it is risky when changes in the Command file are not transferred here');
        $method->addComment('To update this file just run: php artisan '.$projectData->signature);
        $method->setReturnType('void');
        $shortCommandClassName = ClassData::take($projectData->commandClassName)->reflection->getShortName().'::class';
        $method->addBody('$this->assertFirstClassIsOlderThanSecondClass(');
        $method->addBody("    $shortCommandClassName,");
        $method->addBody('    __CLASS__');
        $method->addBody(');');
        /*
         * loop over models
         */
        foreach ($projectData->getAllModels() as $baseModel => $relatedModels) {
            $relCount = count($relatedModels);
            $method = $class->addMethod(
                'testModel'.
                $projectData->getShortModelName($baseModel).
                "Has_$relCount".
                ($projectData->strict ? 'Strict' : 'Tested').
                'Relationship'.
                ($relCount === 1 ? '' : 's').
                'AndWorks'
            );
            $method->addComment('Model '.$baseModel);
            $method->setReturnType('void');
            $method->addBody('$this->assertModelWorks("'.$baseModel.'");');
            if (is_array($relatedModels)) {
                /**
                 * @var string $model2
                 * @var RelationshipEnum $relation
                 */
                foreach ($relatedModels as $model2 => $relation) {
                    if ($relation == RelationshipEnum::noRelation) {
                        continue;
                    }
                    $assertName = $relation->getAssertName();
                    $method->addBody("\$this->$assertName('$baseModel', '$model2');");
                }
                if ($projectData->strict) {
                    $relationCount = count($relatedModels);
                    $method->addBody("\$this->assertModelRelationCount('$baseModel', $relationCount);");
                }
            } else {
                /*
                 * single
                 */
                $method->addBody("\$this->assertIsSingle('$baseModel');");
            }
        }
        $printer = new Nette\PhpGenerator\PsrPrinter;

        return $printer->printFile($file);
    }
}
