<?php

namespace SchenkeIo\LaravelRelationManager\Writer;

use Exception;
use Illuminate\Console\Command;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Facades\Schema;
use Nette;
use PHPUnit\Framework\Attributes\Group;
use PHPUnit\Framework\Attributes\TestDox;
use SchenkeIo\LaravelRelationManager\Data\ClassData;
use SchenkeIo\LaravelRelationManager\Define\ProjectContainer;
use SchenkeIo\LaravelRelationManager\Enums\ConfigKey;
use SchenkeIo\LaravelRelationManager\Traits\AssertModelRelations;

class GenerateProjectTestFile
{
    public function __construct(
        protected Filesystem $filesystem = new Filesystem
    ) {}

    public static function testGroup(): string
    {
        return class_basename(__CLASS__);
    }

    public function writeFile(Command $callingCommand, bool $testStrict): ?string
    {
        $relations = ProjectContainer::getRelations();
        $testProjectClass = (string) ConfigKey::PROJECT_TEST_CLASS->get();
        $extendedTestClass = (string) ConfigKey::EXTENDED_TEST_CLASS->get();
        $refreshDatabase = (bool) ConfigKey::REFRESH_DATABASE_AFTER_EACH_TEST->get(true);
        $signature = (string) $callingCommand->getName();
        $writerCallingClass = get_class($callingCommand);
        $rebuildCommand = (str_contains($signature, ':') ? 'php artisan ' : '').$signature;

        $file = new Nette\PhpGenerator\PhpFile;
        $file->addComment('## Test of all models defined');
        $file->addComment("\n------\n");
        $file->addComment('This file is auto-generated by: '.$writerCallingClass);
        $file->addComment('rewrite this test-file on the console with: '.$rebuildCommand);
        // https://laravel.com/docs/10.x/database-testing#resetting-the-database-after-each-test
        $refreshTraitClass = 'Illuminate\Foundation\Testing\RefreshDatabase';
        $assertClass = AssertModelRelations::class;
        $nameSpace = $file->addNamespace(ClassData::take($testProjectClass)->nameSpace);
        if ($refreshDatabase) {
            $nameSpace->addUse($refreshTraitClass);
        }
        $nameSpace->addUse($assertClass);
        $nameSpace->addUse($writerCallingClass);
        $nameSpace->addUse($extendedTestClass);
        $nameSpace->addUse(Group::class);
        $nameSpace->addUse(Schema::class);
        $nameSpace->addUse(TestDox::class);

        $class = $nameSpace->addClass(class_basename($testProjectClass));
        $class->setExtends($extendedTestClass);
        if ($refreshDatabase) {
            $class->addTrait($refreshTraitClass);
        }
        $class->addTrait($assertClass);
        /*
         * file age test
         */
        $method = $class->addMethod('testCommandFileIsOlderThanThisTestFile');
        $method->addComment('@return void');
        $method->addComment('');
        $method->addComment('Since this class is written by the Command file '.$writerCallingClass);
        $method->addComment('it is risky when changes in the Command file are not transferred here');
        $method->addComment('To update this file just run: '.$rebuildCommand);
        $method->addAttribute(Group::class, [GenerateProjectTestFile::testGroup()]);
        $method->setReturnType('void');
        $shortCommandClassName = class_basename($writerCallingClass).'::class';
        $method->addBody('$this->assertFirstClassIsOlderThanSecondClass(');
        $method->addBody("    $shortCommandClassName,");
        $method->addBody('    __CLASS__');
        $method->addBody(');');

        //        print_r($relations);
        /*
         * loop over models
         */
        foreach ($relations as $baseModel => $baseModelRelations) {
            $relCount = 0;
            foreach ($baseModelRelations as $relatedModel => $relations) {
                // we count the relations independent of the models itself
                $relCount += count($relations);
            }

            $method = $class->addMethod(
                'testModel'.
                class_basename($baseModel).
                "Has_$relCount".
                ($testStrict ? 'Strict' : 'Tested').
                'Relationship'.
                ($relCount === 1 ? '' : 's').
                'AndWorks'
            );
            $method->addComment('Model '.$baseModel);
            $method->addAttribute(Group::class, [GenerateProjectTestFile::testGroup()]);
            $method->setReturnType('void');
            foreach ($baseModelRelations as $model2 => $relations) {
                /*
                 * walk all relations
                 * @var Relation $relation
                 */
                foreach ($relations as $relation) {
                    $assertName = $relation->getAssertName();
                    $method->addBody("\$this->$assertName('$baseModel'".
                        ($model2 ? ", '$model2'" : '').
                        ');'
                    );
                }
            }
            if ($testStrict) {
                $method->addBody("\$this->assertModelRelationCount('$baseModel', $relCount);");
            }
        }
        /*
         * loop over tables and keys
         */

        $tableFields = [];
        if (ConfigKey::TEST_DATABASE->get()) {
            $tableFields = ProjectContainer::getTableFields(true);
        }

        foreach ($tableFields as $table => $fields) {
            $method = $class->addMethod("testDatabaseTable_{$table}");
            $method->addAttribute(Group::class, [GenerateProjectTestFile::testGroup()]);
            $method->addBody("\$this->assertTrue(Schema::hasTable('$table'));");
            foreach ($fields as $field) {
                $method->addBody("\$this->assertTrue(Schema::hasColumn('$table','$field'));");
            }
        }

        $fileName = ClassData::take($testProjectClass)->fileName;
        try {

            $printer = new Nette\PhpGenerator\PsrPrinter;
            $this->filesystem->put($fileName, $printer->printFile($file));

            return null;
        } catch (Exception $e) {
            return $e->getMessage();
        }

    }
}
