<?php

/**
 * ## Test of all models defined
 *
 * ------
 *
 * This file is auto-generated by: Workbench\App\Console\Commands\RunTestProjectManagerCommand
 * rewrite this test-file on the console with: php artisan run:test-project
 */

namespace SchenkeIo\LaravelRelationManager\Tests\Application;

use Illuminate\Foundation\Testing\RefreshDatabase;
use SchenkeIo\LaravelRelationManager\Phpunit\AssertModelRelations;
use SchenkeIo\LaravelRelationManager\Tests\TestCase;
use Workbench\App\Console\Commands\RunTestProjectManagerCommand;

class TestProjectTest extends TestCase
{
    use RefreshDatabase;
    use AssertModelRelations;

    /**
     * @return void
     *
     * Since this class is written by the Command file Workbench\App\Console\Commands\RunTestProjectManagerCommand
     * it is risky when changes in the Command file are not transferred here
     * To update this file just run: php artisan run:test-project
     */
    public function testCommandFileIsOlderThanThisTestFile(): void
    {
        $this->assertFirstClassIsOlderThanSecondClass(
            RunTestProjectManagerCommand::class,
            __CLASS__
        );
    }

    /**
     * Enum Workbench\App\Models\AreaSize
     */
    public function testBackedEnumAreaSizeWorks(): void
    {
        $this->assertModelBackedEnumWorks("Workbench\App\Models\AreaSize");
    }

    /**
     * Model Workbench\App\Models\Capital
     */
    public function testModelCapitalHas_2StrictRelationshipsAndWorks(): void
    {
        $this->assertModelBackedEnumWorks("Workbench\App\Models\Capital");
        $this->assertModelBelongsTo('Workbench\App\Models\Capital', 'Workbench\App\Models\Country');
        $this->assertModelMorphOne('Workbench\App\Models\Capital', 'Workbench\App\Models\Location');
        $this->assertModelRelationCount('Workbench\App\Models\Capital', 2);
    }

    /**
     * Model Workbench\App\Models\City
     */
    public function testModelCityHas_5StrictRelationshipsAndWorks(): void
    {
        $this->assertModelBackedEnumWorks("Workbench\App\Models\City");
        $this->assertModelIsManyToMany('Workbench\App\Models\City', 'Workbench\App\Models\Highway');
        $this->assertModelMorphOne('Workbench\App\Models\City', 'Workbench\App\Models\Location');
        $this->assertModelHasOneThrough('Workbench\App\Models\City', 'Workbench\App\Models\Country');
        $this->assertModelCastEnum('Workbench\App\Models\City', 'Workbench\App\Models\AreaSize');
        $this->assertModelBelongsTo('Workbench\App\Models\City', 'Workbench\App\Models\GeoRegion');
        $this->assertModelRelationCount('Workbench\App\Models\City', 5);
    }

    /**
     * Model Workbench\App\Models\Country
     */
    public function testModelCountryHas_3StrictRelationshipsAndWorks(): void
    {
        $this->assertModelBackedEnumWorks("Workbench\App\Models\Country");
        $this->assertModelHasOne('Workbench\App\Models\Country', 'Workbench\App\Models\Capital');
        $this->assertModelHasMany('Workbench\App\Models\Country', 'Workbench\App\Models\GeoRegion');
        $this->assertModelHasManyThrough('Workbench\App\Models\Country', 'Workbench\App\Models\City');
        $this->assertModelRelationCount('Workbench\App\Models\Country', 3);
    }

    /**
     * Model Workbench\App\Models\GeoRegion
     */
    public function testModelGeoRegionHas_3StrictRelationshipsAndWorks(): void
    {
        $this->assertModelBackedEnumWorks("Workbench\App\Models\GeoRegion");
        $this->assertModelBelongsTo('Workbench\App\Models\GeoRegion', 'Workbench\App\Models\Country');
        $this->assertModelHasMany('Workbench\App\Models\GeoRegion', 'Workbench\App\Models\City');
        $this->assertModelHasOneThrough('Workbench\App\Models\GeoRegion', 'Workbench\App\Models\Capital');
        $this->assertModelRelationCount('Workbench\App\Models\GeoRegion', 3);
    }

    /**
     * Model Workbench\App\Models\Highway
     */
    public function testModelHighwayHas_2StrictRelationshipsAndWorks(): void
    {
        $this->assertModelBackedEnumWorks("Workbench\App\Models\Highway");
        $this->assertModelBelongsToMany('Workbench\App\Models\Highway', 'Workbench\App\Models\City');
        $this->assertModelMorphMany('Workbench\App\Models\Highway', 'Workbench\App\Models\Location');
        $this->assertModelRelationCount('Workbench\App\Models\Highway', 2);
    }

    /**
     * Model Workbench\App\Models\Location
     */
    public function testModelLocationHas_1StrictRelationshipAndWorks(): void
    {
        $this->assertModelBackedEnumWorks("Workbench\App\Models\Location");
        $this->assertModelMorphTo('Workbench\App\Models\Location');
        $this->assertModelRelationCount('Workbench\App\Models\Location', 1);
    }

    /**
     * Model Workbench\App\Models\Single
     */
    public function testModelSingleHas_0StrictRelationshipsAndWorks(): void
    {
        $this->assertModelBackedEnumWorks("Workbench\App\Models\Single");
        $this->assertModelRelationCount('Workbench\App\Models\Single', 0);
    }
}
